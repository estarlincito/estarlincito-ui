import * as o from "react";
import { composeRefs as u } from "../../../../../@radix-ui_react-compose-refs@1.1.1_@types_react@19.0.10_react@19.0.0/node_modules/@radix-ui/react-compose-refs/dist/index.js";
import { j as c } from "../../../../../../../_virtual/jsx-runtime.js";
var m = o.forwardRef((r, n) => {
  const { children: e, ...t } = r, l = o.Children.toArray(e), i = l.find(g);
  if (i) {
    const s = i.props.children, a = l.map((f) => f === i ? o.Children.count(s) > 1 ? o.Children.only(null) : o.isValidElement(s) ? s.props.children : null : f);
    return /* @__PURE__ */ c.jsx(p, { ...t, ref: n, children: o.isValidElement(s) ? o.cloneElement(s, void 0, a) : null });
  }
  return /* @__PURE__ */ c.jsx(p, { ...t, ref: n, children: e });
});
m.displayName = "Slot";
var p = o.forwardRef((r, n) => {
  const { children: e, ...t } = r;
  if (o.isValidElement(e)) {
    const l = h(e), i = y(t, e.props);
    return e.type !== o.Fragment && (i.ref = n ? u(n, l) : l), o.cloneElement(e, i);
  }
  return o.Children.count(e) > 1 ? o.Children.only(null) : null;
});
p.displayName = "SlotClone";
var d = ({ children: r }) => /* @__PURE__ */ c.jsx(c.Fragment, { children: r });
function g(r) {
  return o.isValidElement(r) && r.type === d;
}
function y(r, n) {
  const e = { ...n };
  for (const t in n) {
    const l = r[t], i = n[t];
    /^on[A-Z]/.test(t) ? l && i ? e[t] = (...a) => {
      i(...a), l(...a);
    } : l && (e[t] = l) : t === "style" ? e[t] = { ...l, ...i } : t === "className" && (e[t] = [l, i].filter(Boolean).join(" "));
  }
  return { ...r, ...e };
}
function h(r) {
  let n = Object.getOwnPropertyDescriptor(r.props, "ref")?.get, e = n && "isReactWarning" in n && n.isReactWarning;
  return e ? r.ref : (n = Object.getOwnPropertyDescriptor(r, "ref")?.get, e = n && "isReactWarning" in n && n.isReactWarning, e ? r.props.ref : r.props.ref || r.ref);
}
export {
  m as Slot,
  d as Slottable
};
